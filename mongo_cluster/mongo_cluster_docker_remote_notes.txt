
Set up docker machines on Digital Ocean, have to get the docker images first:

docker pull mongo

---------------------------------------------

Will put the config server and mongos router on the same node
+ 4 other shard nodes

Need docker network to make the config server and mongos router talk to each other on the same node

---------------------------------------------

Docker network

docker network create mongonetwork
docker network inspect mongonetwork

---------------------------------------------

Config server

docker run --name configserver-mongo -p 27019:27019 --network mongonetwork -d mongo mongod --configsvr --port 27019 --replSet configServerReplicaSet

docker exec -it configserver-mongo /bin/bash

mongo --port 27019

rs.initiate({ _id: "configServerReplicaSet", configsvr: true, members: [ { _id : 0, host : "configserver-mongo:27019" } ] })

ATH Using a docker network to make the containers talk to each other on this machine, so the name works in the IP address

rs.status()

---------------------------------------------

mongos server (router)

docker run --name mongosserver-mongo -p 27017:27017 --network mongonetwork -d mongo mongos --configdb configServerReplicaSet/configserver-mongo:27019

ATH Using a docker network to make the containers talk to each other on this machine, so the name works in the IP address

docker exec -it mongosserver-mongo /bin/bash

mongo --port 27017

---------------------------------------------

Shard servers

----------------------

Shard 1

docker run --name shard1-mongo -p 27018:27018 -d mongo mongod --shardsvr --port 27018 --replSet shard1ReplicaSet

docker exec -it shard1-mongo /bin/bash

mongo --port 27018

rs.initiate({ _id : "shard1ReplicaSet", members: [ { _id : 0, host : "37.139.13.120:27018" } ]})

TODO THIS IP ADDRESS NEEDS TO MAP TO LOCALHOST IN THE HOSTS FILE PROBABLY

rs.status()

----------------------

Shard 2

docker run --name shard2-mongo -p 27018:27018 -d mongo mongod --shardsvr --port 27018 --replSet shard2ReplicaSet

docker exec -it shard2-mongo /bin/bash

mongo --port 27018

rs.initiate({ _id : "shard2ReplicaSet", members: [ { _id : 0, host : "localhost:27018" } ]})

ATH Can have localhost here since there will only be one server (this one) in the replica set

rs.status()

----------------------

Shard 3

docker run --name shard3-mongo -p 27018:27018 -d mongo mongod --shardsvr --port 27018 --replSet shard3ReplicaSet

docker exec -it shard3-mongo /bin/bash

mongo --port 27018

rs.initiate({ _id : "shard3ReplicaSet", members: [ { _id : 0, host : "localhost:27018" } ]})

ATH Can have localhost here since there will only be one server (this one) in the replica set

rs.status()

----------------------

Shard 4

docker run --name shard4-mongo -p 27018:27018 -d mongo mongod --shardsvr --port 27018 --replSet shard4ReplicaSet

docker exec -it shard4-mongo /bin/bash

mongo --port 27018

rs.initiate({ _id : "shard4ReplicaSet", members: [ { _id : 0, host : "localhost:27018" } ]})

ATH Can have localhost here since there will only be one server (this one) in the replica set

rs.status()

---------------------------------------------

Mongos configuration

Add shards to the cluster:
Do this for all shards, until the cluster includes all shards

sh.addShard("shard1ReplicaSet/37.139.13.120:27018")

sh.addShard("shard2ReplicaSet/95.85.27.21:27018")

sh.addShard("shard3ReplicaSet/95.85.42.132:27018")

sh.addShard("shard4ReplicaSet/188.226.135.141:27018")















